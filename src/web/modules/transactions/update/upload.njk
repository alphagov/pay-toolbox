{% from "govuk/components/file-upload/macro.njk" import govukFileUpload %}
{% from "govuk/components/button/macro.njk" import govukButton %}
{% from "govuk/components/table/macro.njk" import govukTable %}
{% from "common/errorSummary.njk" import errorSummary %}
{% extends "layout/layout.njk" %}

{% block main %}
  <span class="govuk-caption-m">GOV.UK Pay platform</span>
  <h1 class="govuk-heading-l">Update transactions</h1>

  {% for message in messages %}
    <div class="govuk-error-summary success-summary" role="alert">
      <h2 class="govuk-error-summary__title">{{message}}</h2>
    </div>
  {% endfor %}

  {% for error in errors %}
    <div class="govuk-error-summary" role="alert">
      <h2 class="govuk-error-summary__title">{{error}}</h2>
    </div>
  {% endfor %}

  <form method="POST" action="/transactions/update?_csrf={{ csrf }}" enctype="multipart/form-data">
    {{ govukFileUpload({
        id: "transactions-file",
        name: "transactions-file",
        label: {
          text: "Upload a CSV containing a list of transactions to update. The CSV must have headers according the specification below."
        }
    }) }}

    {{ govukButton({
        text: "Submit"
        })
    }}
  </form>

  <h2 class="govuk-heading-m govuk-!-margin-top-4">CSV headers schema</h2>

  <h3 class="govuk-heading-s">Required headers</h3>

    <div>
    <table class="govuk-table">
        <tr class="govuk-table__row">
          <th class="govuk-table__cell" scope="row"><span class="govuk-caption-m">transaction_id</span></th>
          <td class="govuk-table__cell">The external ID of the payment/refund</td>
        </tr>
        <tr class="govuk-table__row">
          <th class="govuk-table__cell" scope="row"><span class="govuk-caption-m">transaction_type</span></th>
          <td class="govuk-table__cell">The type of the transaction, one of ‘payment’ or ‘refund’.</td>
        </tr>
        <tr class="govuk-table__row">
          <th class="govuk-table__cell" scope="row"><span class="govuk-caption-m">event_name</span></th>
          <td class="govuk-table__cell">The name of the event that will be stored against the transaction. It should be SCREAMING_SNAKE_CASE and describe the action performed against the transaction in the past tense. Do not use names given to system created events.</td>
        </tr>
        <tr class="govuk-table__row">
          <th class="govuk-table__cell" scope="row"><span class="govuk-caption-m">reason</span></th>
          <td class="govuk-table__cell">A free text explanation of why the transaction is being updated. This field will only be used internally as a record so should be as detailed as necessary. Reference Zendesk or JIRA ticket IDs where appropriate.</td>
        </tr>
      </tbody>
    </table>
  </div>

  <h3 class="govuk-heading-s">Transaction field headers</h3>

  <p class="govuk-body">Include any number of headers which correlate to fields on a transaction to add or update, e.g. ‘reference’. For nested fields, use dot notation, i.e. ‘outer_field.nested_field’. </p>
  <p class="govuk-body">If no value is provided for individual transaction rows, the field will not be updated for that transaction.</p>

  <h3 class="govuk-heading-s">Optional headers</h3>

  <div>
    <table class="govuk-table">
      <tbody class="govuk-table__body">
        <tr class="govuk-table__row">
          <th class="govuk-table__cell" scope="row"><span class="govuk-caption-m">event_date</span></th>
          <td class="govuk-table__cell">The timestamp for the event. Must be a valid ISO-8601 format e.g. 2020-01-01T12:30:45Z. If no value is provided, the time when the file is uploaded will be used. When picking a time, remember that later events override earlier ones when calculating the status etc.</td>
        </tr>
        <tr class="govuk-table__row">
          <th class="govuk-table__cell" scope="row"><span class="govuk-caption-m">parent_transaction_id</span></th>
          <td class="govuk-table__cell">Required for refunds only, this is the payment external ID.</td>
        </tr>
      </tbody>
    </table>
  </div>

  <h3 class="govuk-heading-s">Event naming</h3>

  <p class="govuk-body">
    If the administrative update to a payment/ refund requires moving the external state, the event name should
    correspond to a known Ledger 'salient' event.
  </p>
  <p class="govuk-body">Examples of corrective Ledger events:</p>
  <ul class="govuk-list govuk-list--bullet">
    <li><code>PAYMENT_STATUS_CORRECTED_TO_SUCCESS_BY_ADMIN</code></li>
    <li><code>PAYMENT_STATUS_CORRECTED_TO_ERROR_BY_ADMIN</code></li>
    <li><code>REFUND_STATUS_CORRECTED_TO_SUCCESS_BY_ADMIN</code></li>
    <li><code>REFUND_STATUS_CORRECTED_TO_ERROR_BY_ADMIN</code></li>
  </ul>
  <p class="govuk-body">Possible external statuses and events can be
  <a class="govuk-link" href="https://github.com/alphagov/pay-ledger/blob/master/src/main/java/uk/gov/pay/ledger/transaction/state/TransactionState.java">viewed and contributed to on GitHub</a>
  .
  </p>
  <p class="govuk-body">
    Most administrative updates will not need to move the external state of a transaction and should follow naming advice
    as per the table above. For example the event name <code>PAYMENT_UPDATED_TO_MATCH_SERVICE_RECORDS</code> with the 'reason'
    and 'reference' fields populated.
  </p>

  <h2 class="govuk-heading-s">Things to remember</h2>
  <p class="govuk-body">
    If a payment or refund is changed from error to success or vice-versa, the <code>refund_status</code>,
    <code>refund_amount_refunded</code> and <code>refund_amount_available</code> have to also be updated on the payment.
  </p>
  <p class="govuk-body">
    If the transaction is still in connector, it will need to be updated there as well.
  </p>

  <h2 class="govuk-heading-s">Inspiration</h2>
  <p class="govuk-body">
    See <a href="https://github.com/alphagov/pay-scripts/tree/master/ad-hoc-scripts/toolbox_csv_uploads">toolbox_csv_uploads
    in Pay scripts</a> for past CSVs.</p>
  </p>

{% endblock %}
